from faker import Faker
from backend.models import User, Post, Profile, Place, Review, Comment, Message, UserFollow, Achievement, Route, RoutePoint, RouteLike
from backend.database import SessionLocal, engine, Base
from passlib.context import CryptContext
import random
from datetime import datetime, timedelta

fake = Faker(['ru_RU'])
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_tables():
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    Base.metadata.drop_all(bind=engine)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    Base.metadata.create_all(bind=engine)  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    print("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")

def create_test_data():
    db = SessionLocal()
    
    # –°–ø–∏—Å–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    countries = [
        "–ò—Ç–∞–ª–∏—è", "–§—Ä–∞–Ω—Ü–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–Ø–ø–æ–Ω–∏—è", "–¢–∞–∏–ª–∞–Ω–¥", 
        "–ì—Ä–µ—Ü–∏—è", "–¢—É—Ä—Ü–∏—è", "–ò–Ω–¥–æ–Ω–µ–∑–∏—è", "–í—å–µ—Ç–Ω–∞–º", "–ú–∞–ª—å–¥–∏–≤—ã"
    ]
    
    cities = {
        "–ò—Ç–∞–ª–∏—è": ["–†–∏–º", "–í–µÔøΩÔøΩ–µ—Ü–∏—è", "–§–ª–æ—Ä–µ–Ω—Ü–∏—è", "–ú–∏–ª–∞–Ω"],
        "–§—Ä–∞–Ω—Ü–∏—è": ["–ü–∞—Ä–∏–∂", "–ù–∏—Ü—Ü–∞", "–õ–∏–æ–Ω", "–ú–∞—Ä—Å–µ–ª—å"],
        "–ò—Å–ø–∞–Ω–∏—è": ["–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "–ú–∞–¥—Ä–∏–¥", "–í–∞–ª–µ–Ω—Å–∏—è", "–°–µ–≤–∏–ª—å—è"],
        "–Ø–ø–æ–Ω–∏—è": ["–¢–æ–∫–∏–æ", "–ö–∏–æ—Ç–æ", "–û—Å–∞–∫–∞", "–ù–∞—Ä–∞"],
        "–¢–∞–∏–ª–∞–Ω–¥": ["–ë–∞–Ω–≥–∫–æ–∫", "–ü—Ö—É–∫–µ—Ç", "–ü–∞—Ç—Ç–∞–π—è", "–ß–∏–∞–Ω–≥–º–∞–π"]
    }

    place_categories = ["restaurant", "hotel", "attraction", "beach", "museum"]
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements = [
        {
            "title": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫-–Ω–æ–≤–∏—á–æ–∫",
            "description": "–ü–æ—Å–µ—Ç–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω—É",
            "icon_url": "üå±",
            "condition_type": "countries_visited",
            "condition_value": 1
        },
        {
            "title": "–û–ø—ã—Ç–Ω—ã–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫",
            "description": "–ü–æ—Å–µ—Ç–∏—Ç–µ 10 —Å—Ç—Ä–∞–Ω",
            "icon_url": "üåç",
            "condition_type": "countries_visited",
            "condition_value": 10
        },
        {
            "title": "–ë–ª–æ–≥–µ—Ä",
            "description": "–°–æ–∑–¥–∞–π—Ç–µ 10 –ø–æ—Å—Ç–æ–≤",
            "icon_url": "‚úçÔ∏è",
            "condition_type": "posts_created",
            "condition_value": 10
        }
    ]
    
    for achievement_data in achievements:
        achievement = Achievement(**achievement_data)
        db.add(achievement)
    
    users = []
    # –°–æ–∑–¥–∞–µ–º 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for i in range(5):
        user = User(
            email=fake.unique.email(),
            username=fake.unique.user_name(),
            hashed_password=pwd_context.hash("password123"),
            full_name=fake.name(),
            avatar_url=f"https://i.pravatar.cc/300?img={i+1}"
        )
        db.add(user)
        db.flush()
        users.append(user)
        
        # –ü—Ä–æ—Ñ–∏–ª—å
        visited = random.sample(countries, random.randint(3, 8))
        profile = Profile(
            user_id=user.id,
            location=fake.city(),
            interests="–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –ö—É–ª—å—Ç—É—Ä–∞, –ï–¥–∞, –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
            visited_countries=len(visited),
            travel_style=random.choice(["–õ—é–∫—Å", "–ë—ç–∫–ø–µ–∫–∏–Ω–≥", "–≠–∫–æ—Ç—É—Ä–∏–∑–º"]),
            about_me=fake.text(max_nb_chars=200),
            instagram=f"@{user.username}",
            favorite_places=", ".join(random.sample(visited, min(3, len(visited)))),
            next_destination=random.choice(countries),
            travel_count=random.randint(5, 20)
        )
        db.add(profile)
        
        # –ü–æ—Å—Ç—ã
        for j in range(7):
            country = random.choice(countries)
            city = random.choice(cities.get(country, ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"]))
            
            post = Post(
                title=f"–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ {city}, {country}",
                content="\n\n".join([
                    fake.paragraph(nb_sentences=5),
                    "üåü –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è:",
                    fake.paragraph(nb_sentences=3),
                    "üìç –õ—é–±–∏–º—ã–µ –º–µ—Å—Ç–∞:",
                    "\n".join([f"- {fake.sentence()}" for _ in range(3)]),
                    "üí° –°–æ–≤–µ—Ç—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º:",
                    "\n".join([f"- {fake.sentence()}" for _ in range(2)])
                ]),
                image_url=f"https://picsum.photos/seed/{city.lower().replace(' ', '')}{random.randint(1,1000)}/800/600",
                location=f"{city}, {country}",
                travel_date=datetime.now() - timedelta(days=random.randint(1, 730)),
                user_id=user.id
            )
            db.add(post)
            db.flush()
            
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º
            for _ in range(random.randint(1, 5)):
                comment_user = random.choice(users)
                comment = Comment(
                    content=fake.paragraph(),
                    user_id=comment_user.id,
                    post_id=post.id
                )
                db.add(comment)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    for user in users:
        # –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ 2-4 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for followed_user in random.sample(users, random.randint(2, 4)):
            if user != followed_user:
                follow = UserFollow(
                    follower_id=user.id,
                    following_id=followed_user.id
                )
                db.add(follow)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Å—Ç–∞ –∏ –æ—Ç–∑—ã–≤—ã
    for country in countries:
        for city in cities.get(country, []):
            for _ in range(random.randint(2, 5)):
                category = random.choice(place_categories)
                place = Place(
                    name=fake.company(),
                    description=fake.text(),
                    location=f"{city}, {country}",
                    category=category,
                    image_url=f"https://picsum.photos/seed/place{fake.random_number()}/800/600"
                )
                db.add(place)
                db.flush()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –∫ –º–µ—Å—Ç–∞–º
                for _ in range(random.randint(3, 8)):
                    review_user = random.choice(users)
                    rating = random.randint(3, 5)  # –ù–µ–º–Ω–æ–≥–æ –∑–∞–≤—ã—à–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                    review = Review(
                        place_id=place.id,
                        user_id=review_user.id,
                        rating=rating,
                        content=fake.paragraph(),
                        visit_date=datetime.now() - timedelta(days=random.randint(1, 365))
                    )
                    db.add(review)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –º–µ—Å—Ç–∞
                    place.ratings_count += 1
                    place.average_rating = ((place.average_rating * (place.ratings_count - 1)) + rating) / place.ratings_count
    
    # –°–æ–∑–¥–∞–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    for user in users:
        for _ in range(random.randint(2, 5)):
            receiver = random.choice([u for u in users if u != user])
            message = Message(
                sender_id=user.id,
                receiver_id=receiver.id,
                content=fake.sentence(),
                is_read=random.choice([True, False])
            )
            db.add(message)
    
    try:
        db.commit()
        print("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    create_tables()
    create_test_data() 